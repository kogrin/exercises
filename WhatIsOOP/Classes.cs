namespace OopExamples
{
    public class Point
    {
        public int X { get; }
        public int Y { get; }
        public Point(int x, int y) => (X, Y) = (x, y);
    }

    public class Pair<TypeFirst, TypeSecond>
    {
        public TypeFirst First { get; }
        public TypeSecond Second { get; }
        public Pair(TypeFirst first, TypeSecond second) =>
            (First, Second) = (first, second);
    }

}

// TIL:
// namespace — это круто!
// _ _ _
// - объекты — некие сущности — у них есть: состояние, поведение
// - классы — чертежи которые задают объекты (определяют тип объекты)
// - методы — описывают поведение объектов некоторого класса/типа, "связаны" с объектом
// - интерфейс — способы взаимодействия с объектом "извне"
// - "свойство" (property) — поле + задающий метод и читающий метод (setter, getter)

// - сокрытие — это механизм ограничивающий доступ к состоянию объекта + "ты не паришься как устроен объект внутри"
// - инкапсуляция (*) — сокрытие + неразрывность связи между объектом и его поведением; объект — это такая "штука"
// - абстракция — это выделение существенных характеристик чего-то, что существует в предметной области, чтобы с этим было можно работать (ыыы "объективация").

// - наследование — способ выделения общих свойств/атрибутов класса путём создания надкласса — класса "предка":
//  -> правило наследования: "более общее понятие — более конкретное понятие"

// - полиморфизм — способность объектов одного и того же класса иметь различное поведение (различная реализация методов) в зависимости от подтипа/подкласса конкретного объекта, не нарушая при этом интерфейс класса-предка -> «один интерфейс — много реализаций»
